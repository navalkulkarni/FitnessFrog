@model Treehouse.FitnessFrog.Models.Entry
@using Treehouse.FitnessFrog.Models
@{
    ViewBag.Title = "Add Entry";

    //var items = new[]
    //{
    //    new { Id =1,Name ="Item 1"},
    //    new { Id =2,Name = "Item 2"}
    //};

    //var selectList = new[]
    //{
    //    new SelectListItem(){Value ="1", Text ="Item 1",Selected = false},
    //    new SelectListItem(){Value ="2",Text ="Item 2",Selected = true}
    //};

    //var selectList = new SelectList(items, "Id", "Name");


}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    <div class="row">

        <div class="col-md-6">

            <div class="form-group">
                @Html.LabelFor(e => e.Date,new { @class = "control-label"})
                @Html.TextBoxFor(e => e.Date,"{0:d}",new { @class="form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(e =>e.ActivityId, new { @class="control-label"})
                @Html.DropDownListFor(e => e.ActivityId, (SelectList)ViewBag.ActivitiesSelectListItems,"None",new { @class = "form-control"})
            </div>

            <div class="form-group">
                @Html.LabelFor(e => e.Duration, new { @class = "control-label" })
                @Html.TextBoxFor(e => e.Duration, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(e => e.Intensity, new { @class = "control-label" })
                <div>
                    @*This is one way,Another way is by using model values
                    @Html.RadioButtonFor(e => e.Intensity, "Low") Low
                    @Html.RadioButtonFor(e => e.Intensity, "Medium") Medium
                    @Html.RadioButtonFor(e => e.Intensity, "High") High*@

                    @*With below way you don't have to make changes to the view and there are less chances of making any error*@
                    <label class="radio-inline">
                        @Html.RadioButtonFor(e => e.Intensity, Entry.IntensityLevel.Low) @Entry.IntensityLevel.Low
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(e => e.Intensity, Entry.IntensityLevel.Medium) @Entry.IntensityLevel.Medium
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(e => e.Intensity, Entry.IntensityLevel.High) @Entry.IntensityLevel.High
                    </label>
                </div>
            </div>

            <div class="form-group">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(e => e.Exclude) @Html.DisplayNameFor(e => e.Exclude)
                    </label>
                </div>
            </div>

        </div>

        <div class="col-md-6">

            <div class="form-group">
                @Html.LabelFor(e => e.Notes, new { @class = "control-label" })
                @Html.TextAreaFor(e => e.Notes,14,20, new { @class = "form-control" })
            </div>

        </div>

        <div class="col-md-12">
            <div class="pad-top">
                <button type="submit" class="btn btn-success btn-lg margin-right">
                    <span class="glyphicon glyphicon-save"></span> Save
                </button>
                <a href="@Url.Action("Index")" class="btn btn-warning btn-lg">
                    <span class="glyphicon glyphicon-remove"></span> Cancel
                </a>
            </div>
        </div>

    </div>

}

